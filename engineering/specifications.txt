specifications.txt :
    Technical specifications for how we will meet our high-level objectives.


Implementation Specifications:
==============================
Versions:
- vis1 through vis8:
    - previous versions
- vis9, vis9a, vis9b, vis9c, vis-stable, vis9d:
    - vis9x are current versions; 9c is the most recent tagged version (it's a fixed-in-time label)
    - bugs are fixed in the vis-stable branch, but no new features are added (it's an auto-updating label)
    - vis9d will be tagged as we release visX, so 9d will be the most tested version at that point
- visX:
    - would be vis10, but we'll use "X" instead, as per Catherine's suggestion
    - will use the Web/VisTrails architecture we envision for the end of the grant
    - will acquire letter (visXa, visXb, etc.) as we add features and fix bugs
- vis11, vis12, etc.
    - the distant future!

Targeted Libraries:
- python 3.7
    This is the most recent version of our primary programming language, which we chose because of the availability of music21.
- music21 5.3
    This library ("software toolkit") was developed by team member Myke Cuthbert, and contains representations of and operations on a variety of musical objects. Version 1.6.0 is not yet released, but it has features and bug-fixes we require.
    - Uses "LGPL" licence.
- pandas 0.23.1
    This library provides fast data structures that are compatible with music21's ubiquitous "Stream" objects and more flexible for scientific and statistical operations (especially through R). We will introduce pandas with visX. Also the optional dependency libraries:
    - Uses 3-clause BSD license.
    - numexpr
        "Numexpr is a fast numerical expression evaluator for NumPy."
        - Uses MIT license.
    - bottleneck
        "Bottleneck is a collection of fast NumPy array functions written in Cython."
        - Uses Simplified BSD license.
- django 1.5.1 (object-relational mapper)
    This library provides an easy and power way to connect to relational databases. This will be useful for our internal query processes, and for the future situation where we will store analysis results on a Web server.
    - Uses 3-clause BSD license.
- R 3.0.1
    Supplementary programming language for statistics and visualizations.
    - Uses GPLv2+ license.
    - Rpy 2.3.6
        Transforms our python-language data objects into R-language data objects.
        - Uses "GPL" license.
    - ggplot2 0.9.3.1
        "ggplot2 is a plotting system for R, based on the grammar of graphics, which tries to take the good parts of base and lattice graphics and none of the bad parts."
        - license?
- Abjad 2.12
    Python library to help with output to LilyPond.
    - Uses "GPL" license.
- PyQt4
    Mostly a GUI library. Prior to visX, all our graphical interfaces have used PyQt. Since VisTrails also uses PyQt, we may write our own PyQt code for minor tasks, like displaying the offset-selection window.
    - Uses GPLv3 license.
- mock 1.0.1
    A library for unit testing, to create mock objects and patch dependencies.
    - Uses 3-clause BSD license.
- VisTrails 2.0 API
    http://www.vistrails.org/usersguide/v2.0/html/batch.html#finding-methods-via-the-command-line
- Haskell 2010
    Supplementary programming language for exploratory research purposes. Uses a "functional" paradigm, allowing greater efficiency in many types of computationally-intensive questions. Likely to show up in the developers' own research, but not in functionality we will announce in October.

Two Data Models:
- IndexedPiece:
    Stores, formats, and prepares data about a single piece.
- AggregatedPieces:
    Stores, formats, and prepares data about more than one IndexedPiece.

Two Types of Analyzers:
- Indexer:
    For things that make sense to imagine as starting at the beginning and ending at the end of a piece, like "notes" or "chords." You might describe these as "observed" features.
- Experimenter:
    For things that correspond to a piece, but not a particular moment in it, like "number of notes" and "contrapuntal entropy." You might describe these as "extracted" features.


Documentation Needs:
- vis API:
    - IndexedPiece
    - AggregatedPieces
- vis Extensibility API:
    - Indexer
    - Experimenter
